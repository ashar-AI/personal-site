---
import type { CollectionEntry } from 'astro:content'
import calculateReadingTime from 'reading-time'

import BlogInfo from './BlogInfo.astro'
import { ArrowRight } from './icons/ArrowRight'
import Image from './Image'
import Link from './Link'

interface Props extends Omit<CollectionEntry<'blog'>, 'data'> {
  data: CollectionEntry<'blog'>['data'] & {
    pubDate: Date | string;
    updatedDate?: Date | string;
    readingTime?: number;
  };
  class?: string;
}

const {
  id: slug,
  data: { 
    heroImage, 
    title, 
    pubDate, 
    description, 
    tags = [],
    readingTime,
    ...restData
  },
  body,
  class: className = ''
} = Astro.props as Props;

// Calculate reading time if not provided
const calculatedReadingTime = readingTime ?? (body ? Math.ceil(calculateReadingTime(body).minutes) : 0);
---

<Link
  href={`/blog/${slug}`}
  class:list={[
    'group flex gap-8 border-t border-t-zinc-900 py-10 max-md:flex-col',
    className
  ]}
>
  {heroImage && (
    <div class='md:flex-shrink-0'>
      <Image
        src={heroImage}
        alt={title}
        width={400}
        height={225}
        class='aspect-video w-full object-cover transition-all duration-300 group-hover:scale-105 md:w-64'
        wrapperProps={{ class: 'rounded-lg overflow-hidden' }}
        loading='lazy'
      />
    </div>
  )}
  
  <div class='flex w-full flex-col justify-between lg:py-2'>
    <div class='font-light'>
      <BlogInfo pubDate={new Date(pubDate)} readingTime={calculatedReadingTime} />
      
      <h3 class='font-display mt-3 text-xl font-semibold leading-tight text-zinc-100 line-clamp-2'>
        {title}
      </h3>
      
      {description && (
        <p class='mt-2 line-clamp-2 text-zinc-400 max-md:text-sm'>
          {description}
        </p>
      )}
      
      {tags && tags.length > 0 && (
        <div class='mt-3 flex flex-wrap gap-2'>
          {tags.slice(0, 3).map((tag) => (
            <span class='rounded-full bg-zinc-800 px-3 py-1 text-xs font-medium text-zinc-300'>
              {tag}
            </span>
          ))}
        </div>
      )}
    </div>

    <div class='mt-4 flex flex-col gap-3'>
      <div class='flex items-center justify-between'>
        <span class='inline-flex items-center text-sm font-medium text-emerald-500 group-hover:underline'>
          Read more
          <ArrowRight class='ml-1 h-4 w-4 transition-transform group-hover:translate-x-1' />
        </span>
      </div>
      
      {tags && tags.length > 0 && (
        <div class='flex flex-wrap gap-2'>
          {tags.slice(0, 3).map((tag) => (
            <span class='rounded-full bg-zinc-800/80 px-2.5 py-1 text-xs font-medium text-zinc-300'>
              {tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class='rounded-full bg-zinc-800/50 px-2.5 py-1 text-xs font-medium text-zinc-500'>
              +{tags.length - 3}
            </span>
          )}
        </div>
      )}
    </div>
  </div>
</Link>

<style define:vars={{ offsetEnd: '24px' }}></style>
